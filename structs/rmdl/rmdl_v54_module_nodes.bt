//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl, rmdl
//   Authors: Rika
//   Version: 52/53/54
// Increment: 8/9/10/11/12/12.1/12.2/13/14/15
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.mdl, *.rmdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


/*NODE MODULE*/


// setup nodes, not fully understood
// nodes have names
local int i_2 = 0;

struct nodedata_t{ // transition anim
    short tonode; // node index
    short seq; // seq index (rrig rson)
} ;

struct node_t{
    local string name = ReadString(startof(hdr) + nodename[i]);
    int count <hidden=true>; // number of datas
    for(i_2 = 0; i_2 < count; i_2++) nodedata_t data <read=Str("%d To %s", this.seq, ReadString(startof(hdr) + nodename[this.tonode - 1])), write=SScanf(value, "%d/%d", this.seq, this.tonode)>;
};

if(hdr.numlocalnodes > 0){
    FSeek(hdr.localnodenameindex);
    int nodename[hdr.numlocalnodes] <bgcolor=cDkYellow, read=ReadString(startof(hdr) + this)>;
    
    FSeek(hdr.nodedataindexindex);
    int nodedataindex[hdr.numlocalnodes] <bgcolor=cYellow>;

    struct {
        for(i = 0; i < hdr.numlocalnodes; i++){   
            FSeek(nodedataindex[i]);
            node_t node <bgcolor=cDkYellow, read=Str("%s (%d)", this.name, this.count), write=SScanf(value, "%d", this.count)>;
        }
    } node_data <comment="Transition anim">;
}