//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 53
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../rmdl/rmdl_structs.bt"
#include "../phy/vphy.bt"
#include "../vtx/vtx.bt"
#include "../vv/vv.bt"

local int i = 0;
local int j = 0;
local int k = 0;
local int l = 0;
local int m = 0;
local int n = 0;
local int x = 0;
local int g = 0;


// headers
studiohdr_t_v53 hdr <bgcolor=cLtBlue, read=ReadString(startof(this) + this.sznameindex)>;


// funny strings that work the same always
#include "../mdl/mdl_v52_module_mayastrings.bt"


// bones
FSeek(hdr.boneindex);
mstudiobone_t_v53 bones[hdr.numbones] <bgcolor=cLtGreen, read=Str("%s : %i : %i : %i", ReadString(startof(this) + this.sznameindex), this.parent, this.unkindex, this.unkcount)>;

local int jigglebonecount = 0;

for (i = 0; i < hdr.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;      
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen>;

FSeek(hdr.localattachmentindex);
mstudioattachment_t attachments[hdr.numlocalattachments] <bgcolor=0xcff5ca, read=Str("%s : %s", ReadString(startof(this) + this.sznameindex), ReadString(startof(bones[this.localbone]) + bones[this.localbone].sznameindex))>;


// hitbox
FSeek(hdr.hitboxsetindex);
struct {
    for (i = 0; i < hdr.numhitboxsets; ++i)
    {
       FSeek(hdr.hitboxsetindex + (sizeof(mstudiohitboxset_t) * i));
       struct {
            mstudiohitboxset_t hboxset <bgcolor=0xf2e46a, read=ReadString(startof(this) + this.sznameindex)>;
    
            FSeek(startof(hboxset) + hboxset.hitboxindex);
            mstudiobbox_t_v53 hboxes[hboxset.numhitboxes] <bgcolor=0xa29418, read=Str("%s : %s : %i", ReadString(startof(this) + this.szhitboxnameindex), ReadString(startof(this) + this.keyvalueindex), this.critoverride)>;
       } hitboxset <read=ReadString(startof(this.hboxset) + this.hboxset.sznameindex)>;
    };
} hitboxsets <read=Str("%i hitboxsets", hdr.numhitboxsets)>;

// more bones
FSeek(hdr.bonetablebynameindex);
unsigned char bonebyname[hdr.numbones] <read=ReadString(startof(bones[this]) + bones[this].sznameindex), bgcolor=cDkGreen>;
local vec3 scale;
scale[0] = 1;
scale[1] = 1;
scale[2] = 1;
// animation
if(hdr.numlocalanim)
{
    struct {
        for (i = 0; i < hdr.numlocalanim; ++i)
        {
            FSeek(hdr.localanimindex + (sizeof(mstudioanimdesc_t_v53) * i));
            struct {
                mstudioanimdesc_t_v53 animdesc <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;
                //local int animidx = i;

                if(animdesc.sectionindex)
                {
                    struct {
                        // if breaking things remove casts
                        local int sectionlength = ((float)animdesc.numframes / (float)animdesc.sectionframes) + 2;
    
                        FSeek(startof(animdesc) + animdesc.sectionindex);
                        mstudioanimsections_t_v53 sectionindexes[sectionlength] <bgcolor=cLtBlue>;
    
                        for(k = 0; k < sectionlength; k++)
                        {
                            if(sectionindexes[k].animindex)
                            {
                                struct {
                                    FSeek(startof(animdesc) + sectionindexes[k].animindex);
                            
                                    for(j = 0; j < hdr.numbones; j++)
                                    {
                                        struct {
                                            mstudio_rle_anim_t_v53 sectionanimheader <read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex), bgcolor=0x771122>;

                                            if(!(sectionanimheader.flags & STUDIO_ANIM_RAWROT_53))
                                            {
                                                struct {
                                                    ReadValuePtr(sectionanimheader.pRotV, animdesc.sectionframes + 1);
                                                } rot;
                                            }
                                            
                                            if(!(sectionanimheader.flags & STUDIO_ANIM_RAWPOS_53))
                                            {
                                                struct {
                                                    ReadValuePtr(sectionanimheader.pPosV, animdesc.sectionframes + 1);
                                                } pos;
                                            }
            
                                            if(!(sectionanimheader.flags & STUDIO_ANIM_RAWSCALE_53))
                                            {
                                                struct {
                                                    ReadValuePtr(sectionanimheader.pScaleV, animdesc.sectionframes + 1);
                                                } scale;
                                            }
    
                                            FSeek(startof(sectionanimheader) + sectionanimheader.nextoffset);
                                        } section_anim_header_data <read=ReadString(startof(bones[this.sectionanimheader.bone]) + bones[this.sectionanimheader.bone].sznameindex)>;

                                        if(section_anim_header_data.sectionanimheader.nextoffset <= 0)
                                                break;
                                    }
                                } section;
                            }
                        }
                    } sectionanimation;
                }
                else
                {
                    struct {
                        FSeek(startof(animdesc) + animdesc.animindex);
    
                        for(j = 0; j < hdr.numbones; j++)
                        {
                            struct {
                                mstudio_rle_anim_t_v53 animheader <read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex), bgcolor=cBlue>;
    
                                if(!(animheader.flags & STUDIO_ANIM_RAWROT_53))
                                {
                                    struct {
                                        ReadValuePtr(animheader.pRotV, animdesc.numframes, 1, scale);
                                    } rot;
                                }
                                
                                if(!(animheader.flags & STUDIO_ANIM_RAWPOS_53))
                                {
                                    struct {
                                        ReadValuePtr(animheader.pPosV, animdesc.numframes, 0, scale);
                                    } pos;
                                }

                                if(!(animheader.flags & STUDIO_ANIM_RAWSCALE_53))
                                {
                                    struct {
                                        ReadValuePtr(animheader.pScaleV, animdesc.numframes, 2, scale);
                                    } scale;
                                }
    
                                FSeek(startof(animheader) + animheader.nextoffset);     
                            } anim_header_data <read=ReadString(startof(bones[this.animheader.bone]) + bones[this.animheader.bone].sznameindex)>;

                            if(anim_header_data.animheader.nextoffset <= 0)
                                    break;
                        }
                    } animation;
                }
    
                // ikrule
                #include "../mdl/mdl_module_ikrule.bt"
            
                // framemovement
                #include "../mdl/mdl_module_framemovement.bt"
                
            } animdesc <read=ReadString(startof(this.animdesc) + this.animdesc.sznameindex)>;
        }      
    } animdescs <read=Str("%i animations", hdr.numlocalanim)>;
}

// sequence stuff
#include "../mdl/mdl_module_sequences.bt"

// unchanged until v54
#include "../mdl/mdl_module_nodes.bt"

// models
#include "../mdl/mdl_module_bodyparts.bt"

// ik
#include "../mdl/mdl_module_ikchain.bt"

FSeek(hdr.localikautoplaylockindex);
mstudioiklock_t iklocks[hdr.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

FSeek(hdr.localposeparamindex);
mstudioposeparamdesc_t poseparm[hdr.numlocalposeparameters] <bgcolor=cYellow, read=ReadString(startof(this) + this.sznameindex)>;


// rui
#include "../mdl/mdl_v53_module_rui.bt"


// I do an include file because these are mostly the same across all mdl versions,
// and I really don't wanna have to update every template every time I change something.
#include "../mdl/mdl_module_texturesincludemdl.bt"


// do keyvalues, this remains unchanged in all models since it's just char data.
FSeek(hdr.keyvalueindex);
char keyvalues_char[hdr.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(hdr.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[hdr.numsrcbonetransform] <bgcolor=cDkGreen, read=ReadString(startof(this) + this.sznameindex)>;


// linear bone table
#include "../mdl/mdl_module_linearbone.bt"


struct pertrinode_t(int pNodeStart, int pLeafStart, int nodeIndex)
{
    FSeek(pNodeStart + (sizeof(mstudiopertrinode_t) * nodeIndex));
    mstudiopertrinode_t node <fgcolor=0x6644dd>;
    
    if (node.child0Index < 0)
    {
        FSeek(pLeafStart + (~node.child0Index * sizeof(mstudiopertrileaf_t)));
        mstudiopertrileaf_t leaf0 <fgcolor=0xffaaaa>;
    }
    else
    {
        BuildNodeTreeForBVH2(pNodeStart, pLeafStart, node.child0Index);
    }
    
    if (node.child1Index < 0)
    {
        FSeek(pLeafStart + (~node.child1Index * sizeof(mstudiopertrileaf_t)));
        mstudiopertrileaf_t leaf1 <fgcolor=0xffaaaa>;
    }
    else
    {
        BuildNodeTreeForBVH2(pNodeStart, pLeafStart, node.child1Index);
    }
};

void BuildNodeTreeForBVH2(int pNodeStart, int pLeafStart, int nodeIndex)
{
    FSeek(pNodeStart);
    pertrinode_t node_group(pNodeStart, pLeafStart, nodeIndex);
}

// per tri aabb data
FSeek(hdr.m_nPerTriAABBIndex);
mstudiopertrihdr_t pertrihdr <fgcolor=cDkRed>; // header completely nulled out if unused.

if (hdr.m_nPerTriAABBNodeCount || hdr.m_nPerTriAABBLeafCount || hdr.m_nPerTriAABBVertCount)
{  
    local int pNode = hdr.m_nPerTriAABBIndex + sizeof(mstudiopertrihdr_t);
    local int pLeaf = pNode + (sizeof(mstudiopertrinode_t) * hdr.m_nPerTriAABBNodeCount);

    if (hdr.m_nPerTriAABBNodeCount)
    {
        struct {
            BuildNodeTreeForBVH2(pNode, pLeaf, 0);
        } node_tree;
    }

    FSeek(pNode);
    mstudiopertrinode_t pertrinodes[hdr.m_nPerTriAABBNodeCount];
    mstudiopertrileaf_t pertrileaves[hdr.m_nPerTriAABBLeafCount];                         
    mstudiopertrivertex_t pertriverts[hdr.m_nPerTriAABBVertCount] <fgcolor=cRed>;
};


// string table
//#include "../mdl/mdl_module_stringtable.bt"

local int stringtable_size;

if(hdr.vphysize || hdr.vtxsize)
{
    if(!hdr.vphysize)
        stringtable_size = hdr.vtxindex - (hdr.sznameindex - 1);
    else
        stringtable_size = hdr.vphyindex - (hdr.sznameindex - 1);
}
else
    stringtable_size = hdr.length - (hdr.sznameindex - 1);

FSeek(hdr.sznameindex - 1);
char stringtable[stringtable_size] <fgcolor=cLtRed>;


//=====
// VPHY


struct vphygroup_t
{   
    phyheader_t vphy_header <bgcolor=cLtRed>;
    physection_t vphy_section[vphy_header.solidCount] <optimize=false>;
    
    local int64 charSize = hdr.vphysize; // have to do this locally here because we can't use FileSize()
    
    for (i = 0; i < vphy_header.solidCount; i++)
        charSize -= vphy_section[i].surfaceheader.size + 4;
    
    charSize -= 16;
    
    FSeek(startof(vphy_header) + (hdr.vphysize - charSize));
    char vphy_stringdata[charSize] <fgcolor=cRed>;
};

if (hdr.vphyindex || hdr.vphysize)
{
    FSeek(hdr.vphyindex);
    vphygroup_t vphy;
}

void GenerateUnknownSections(int sectionIdx, int sectionCount, studiohdr_t_v53 &pHdr, int boneIdx)
{
    for(j = 0; j < sectionCount; j++)
    {
        FSeek(startof(pHdr) + pHdr.unkindex + (sizeof(mstudiocollisionhdr_t) * (sectionIdx + j)));
        struct {
            mstudiocollisionhdr_t collisionhdr <bgcolor=cBlue>;

            FSeek(startof(collisionhdr) + collisionhdr.dataOffset);
            Quaternion unkquat[collisionhdr.unkCount] <bgcolor=cLtBlue>;             
            mstudiocollisionedge_t edge[collisionhdr.edgeCount] <bgcolor=cDkBlue>;            
            Vector vertex[collisionhdr.vertCount] <bgcolor=cBlue>; // vertices
        } section; // <read=Str("parent: %s", ReadString(startof(bones[boneIdx]) + bones[boneIdx].sznameindex))>
    }
}

// phy related thing that is merged into phy in apex
if (hdr.vphysize > 0)
{
    struct {
        if(hdr.numunk)
            GenerateUnknownSections(0, hdr.numunk, hdr, 0);
        else
        {
            // we have to do a loop here for some edge case models with weird phys, and by weird I mean
            // more than one section while also having more than one tri header per section
            // examples found to date like this:
            // models\s2s\s2s_malta_gun_animated.mdl
            for(i = 0; i < hdr.numbones; i++)
            {
                if(!bones[i].unkcount)
                    continue;
            
                GenerateUnknownSections(bones[i].unkindex, bones[i].unkcount, hdr, i);
            }
        }
    } unk;
}


//====
// MDL


// this is mdl related (I think) but comes after everything else
#include "../mdl/mdl_module_bone_followers.bt"


//====
// VTX


struct vtxgroup
{
    FileHeader_t vtx_header <bgcolor=cLtPurple>;

    for (i = 0; i < vtx_header.numBodyParts; ++i)
    {
        FSeek(startof(vtx_header) + vtx_header.bodyPartOffset + (sizeof(BodyPartHeader_t) * i));
        struct {
            BodyPartHeader_t vtx_partheader <bgcolor=cPurple>;
        
            for(j = 0; j < vtx_partheader.numModels; j++)
            {
                FSeek(startof(vtx_partheader) + vtx_partheader.modelOffset + (sizeof(ModelHeader_t) * j));
                struct {
                    ModelHeader_t vtx_modelheader <bgcolor=cDkPurple>;
            
                    for(k = 0; k < vtx_modelheader.numLODs; k++)
                    {
                        FSeek(startof(vtx_modelheader) + vtx_modelheader.lodOffset + (sizeof(ModelLODHeader_t) * k));
                        struct {
                            ModelLODHeader_t vtx_lodheader <bgcolor=cLtPurple>;
                        
                            for(l = 0; l < vtx_lodheader.numMeshes; l++)
                            {
                                FSeek(startof(vtx_lodheader) + vtx_lodheader.meshOffset + (sizeof(MeshHeader_t) * l));
                                struct {
                                    MeshHeader_t vtx_meshheader <bgcolor=cPurple>;
                    
                                    for(m = 0; m < vtx_meshheader.numStripGroups; m++)
                                    {
                                        FSeek(startof(vtx_meshheader) + vtx_meshheader.stripGroupHeaderOffset);
                                        StripGroupHeader_t vtx_stripgrphdr <bgcolor=cDkPurple>;
                        
                                        for(n = 0; n < vtx_stripgrphdr.numStrips; n++)
                                        {
                                            FSeek(startof(vtx_stripgrphdr) + vtx_stripgrphdr.stripOffset + (sizeof(StripHeader_t) * n));
                                            StripHeader_t vtx_strip <bgcolor=cLtPurple>;
                        
                                            FSeek(startof(vtx_stripgrphdr) + vtx_stripgrphdr.vertOffset);
                                            Vertex_t vtx_stripverts[vtx_stripgrphdr.numVerts] <bgcolor=cPurple>;
                    
                                            FSeek(startof(vtx_stripgrphdr) + vtx_stripgrphdr.indexOffset);
                                            unsigned short indice[vtx_stripgrphdr.numIndices] <bgcolor=cDkPurple>;
                    
                                            if(vtx_strip.boneStateChangeOffset)
                                            {
                                                FSeek(startof(vtx_strip) + vtx_strip.boneStateChangeOffset);
                                                struct {
                                                     BoneStateChangeHeader_t bonestate[vtx_strip.numBoneStateChanges] <bgcolor=cLtPurple, optimize=false>;
                                                } bonestate_group;
                                            }
                                        }
                                    }
                                } mesh;
                            }
                        } model_lod;
                    }
                } model;
            }
        } bodypart;
    };
    
    
    FSeek(startof(vtx_header) + vtx_header.materialReplacementListOffset);
    MaterialReplacementListHeader_t materiallist[vtx_header.numLODs] <bgcolor=0xDD00AA>;
};

if(hdr.vtxsize)
{
    FSeek(hdr.vtxindex);
    vtxgroup vtx <fgcolor=0xe8daef>;
}


//===
// VV


// vvd
if (hdr.vvdsize)
{
    FSeek(hdr.vvdindex);
    struct {
        vertexFileHeader_t vv_header <bgcolor=cYellow>;

        if(vv_header.fixupTableStart)
        {
            FSeek(startof(vv_header) + vv_header.fixupTableStart);
            vertexFileFixup_t vv_fixup[vv_header.numFixups] <bgcolor=cDkYellow>;
        }
        
        if(vv_header.vertexDataStart)
        {
            FSeek(startof(vv_header) + vv_header.vertexDataStart);
            mstudiovertex_t vv_vert[vv_header.numLODVertexes[0]] <bgcolor=cLtYellow>;
        }
        
        if(vv_header.tangentDataStart)
        {
            FSeek(startof(vv_header) + vv_header.tangentDataStart);
            Vector4 vv_tangent[vv_header.numLODVertexes[0]] <bgcolor=cDkYellow>;
        }
    } vvd;
}

// vvc
if (hdr.vvcsize)
{
    FSeek(hdr.vvcindex);
    struct {
        vertexColorFileHeader_t vv_header <bgcolor=cYellow>;
    
        /*===========
        from r1 vmts:
    
        "$vertexcolor" "1"
        "$vertcoloristint" "1"
        "$vertexalpha" "1"
    
        "$cockpitlightmap0" "models\titans\stryder\stryder_cockpit\stryder_cockpit_console_pov_lightmap_01"
	    "$cockpitlightmap1" "models\weapons\arms\titan_atlas_screen_lightmap_02"
	    "$cockpitscreenlight" "_rt_TinyFB0"
	    "$seconduvset" "1"
        ===========*/
    
        FSeek(startof(vv_header) + vv_header.colorDataStart);
        VertexColor_t m_color[vv_header.numLODVertexes[0]] <bgcolor=cLtYellow>;
    
        
        FSeek(startof(vv_header) + vv_header.uv2DataStart);
        Vector2 m_vecTexCoord2[vv_header.numLODVertexes[0]] <bgcolor=cDkYellow>;
    } vvc;
}