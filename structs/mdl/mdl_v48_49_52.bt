//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 48/49/52
//   Purpose: Valve/Respawn MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../rmdl/rmdl_structs.bt"

local int i = 0;
local int j = 0;
local int k = 1;
local int x = 0;
local int g = 0;
local int n = 0;



// version before the header is created.
local int pre_version = ReadInt(4);


// headers
if (pre_version >= 52)
{ 
    studiohdr_t_v52 hdr <bgcolor=cLtBlue, read=ReadString(startof(mdlSubHeader) + mdlSubHeader.sznameindex)>;
    FSeek(hdr.studiohdr2index);
    studiohdr2_t_v52 mdlSubHeader <bgcolor=cDkBlue>;

    // funny strings that work the same always
    #include "../mdl/mdl_v52_module_mayastrings.bt"
}
else if (pre_version == 49)
{
    studiohdr_t_v49 hdr <bgcolor=cLtBlue, read=ReadString(startof(mdlSubHeader) + mdlSubHeader.sznameindex)>;
    FSeek(hdr.studiohdr2index);
    studiohdr2_t mdlSubHeader <bgcolor=cDkBlue>;
}
else
{
    studiohdr_t_v48 hdr <bgcolor=cLtBlue, read=ReadString(startof(mdlSubHeader) + mdlSubHeader.sznameindex)>;
    if(hdr.version == 48)
    {
        FSeek(hdr.studiohdr2index);
        studiohdr2_t mdlSubHeader <bgcolor=cDkBlue>;
    }
}


// bones
FSeek(hdr.boneindex);
if (hdr.version >= 52)
    mstudiobone_t_v52 bones[hdr.numbones] <bgcolor=cLtGreen, read=ReadString(startof(this) + this.sznameindex)>;
else if (hdr.version == 49)
    mstudiobone_t_v49 bones[hdr.numbones] <bgcolor=cLtGreen, read=ReadString(startof(this) + this.sznameindex)>;
else
    mstudiobone_t_v47 bones[hdr.numbones] <bgcolor=cLtGreen, read=ReadString(startof(this) + this.sznameindex)>;

local int jigglebonecount = 0;

local char s_jigglebonename;

for (i = 0; i < hdr.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen>;

FSeek(hdr.localattachmentindex);
mstudioattachment_t attachments[hdr.numlocalattachments] <bgcolor=0xcff5ca, read=Str("%s : %s", ReadString(startof(this) + this.sznameindex), ReadString(startof(bones[this.localbone]) + bones[this.localbone].sznameindex))>;


// hitbox
FSeek(hdr.hitboxsetindex);
mstudiohitboxset_t hboxset[hdr.numhitboxsets] <bgcolor=0xf2e46a, read=ReadString(startof(this) + this.sznameindex)>;

// have to do this because some things actually do have more than one.
local int hboxCount = 0;

for (i = 0; i < hdr.numhitboxsets; ++i)
{
   hboxCount += hboxset[i].numhitboxes;
};

mstudiobbox_t bboxes[hboxCount] <bgcolor=0xa29418, read=ReadString(startof(this) + this.szhitboxnameindex)>;


// more bones
FSeek(hdr.bonetablebynameindex);
unsigned char bonebyname[hdr.numbones] <read=ReadString(startof(bones[this]) + bones[this].sznameindex), bgcolor=cDkGreen>;


// animation
if(hdr.numlocalanim)
{
    struct {
        for (i = 0; i < hdr.numlocalanim; ++i)
        {
            FSeek(hdr.localanimindex + (sizeof(mstudioanimdesc_t_v48) * i)); // the same size thankfully
            struct {
                switch(hdr.version)
                {
                case 52:
                    mstudioanimdesc_t_v52 animdesc <bgcolor=0xdc7633>;
                    break;
                case 49:
                    mstudioanimdesc_t_v49 animdesc <bgcolor=0xdc7633>;
                    break;
                default:
                    mstudioanimdesc_t_v48 animdesc <bgcolor=0xdc7633>;
                    break;
                }

                if(!animdesc.animblock)
                {
                    if(animdesc.flags & STUDIO_FRAMEANIM)
                    {
                        if(animdesc.sectionindex)
                        {
                            struct {
                                local int sectionlength = (animdesc.numframes / animdesc.sectionframes) + 2;
                
                                FSeek(startof(animdesc) + animdesc.sectionindex);
                                mstudioanimsections_t sectionindexes[sectionlength] <bgcolor=cLtBlue>;
                
                                for(k = 0; k < sectionlength; k++)
                                {
                                    if(sectionindexes[k].animindex && !sectionindexes[k].animblock)
                                    {
                                        struct {
                                            FSeek(startof(animdesc) + sectionindexes[k].animindex);
                                            if(hdr.version == 52)
                                                mstudio_frame_anim_t_v52 frameanim <bgcolor=0x632970>;
                                            else
                                                mstudio_frame_anim_t frameanim <bgcolor=0x632970>;
                        
                                            byte boneflagarray[hdr.numbones] <read=ReadFrameAnimFlags(this), bgcolor=0xaaaa22>;
                    
                                            local int sectionframes = 0;
                
                                            if(k == (sectionlength - 1))
                                                sectionframes = animdesc.sectionframes;
                                            else
                                                sectionframes = animdesc.sectionframes + 1;
                
                                            if(hdr.version == 52)
                                            {
                                                FSeek(startof(frameanim) + frameanim.unkdataindex);
                                                unkframeanimdata_t unkdatatype[hdr.numbones];
                                            }
                    
                                            FSeek(startof(frameanim) + frameanim.constantsoffset);
                                            struct {
                                                for(j = 0; j < hdr.numbones; j++)
                                                {
                                                    if((boneflagarray[j] & STUDIO_FRAME_RAWPOS) || (boneflagarray[j] & STUDIO_FRAME_RAWROT) || (hdr.version == 52 && (boneflagarray[j] & STUDIO_FRAME_RAWSCALE_52)))
                                                    {
                                                        struct {
                                                            local int boneidx = j;
            
                                                            if(boneflagarray[j] & STUDIO_FRAME_RAWROT)
                                                                Quaternion48 rawrot;
                
                                                            if(boneflagarray[j] & STUDIO_FRAME_RAWPOS)
                                                                Vector48 rawpos;
                
                                                            if(hdr.version == 52)
                                                            {
                                                                if(boneflagarray[j] & STUDIO_FRAME_RAWSCALE_52)
                                                                    Vector48 rawscale;
                                                            }
                                                        } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0x321431>;
                                                    }                   
                                                }
                                            } constantdata;
                    
                                            FSeek(startof(frameanim) + frameanim.frameoffset);
                                            if(frameanim.framelength)
                                            {
                                                struct {
                                                    for(j = 0; j < hdr.numbones; j++)
                                                    {
                                                        if(hdr.version == 52)
                                                        {
                                                            if((boneflagarray[j] & STUDIO_FRAME_ANIMPOS_52) || (boneflagarray[j] & STUDIO_FRAME_ANIMROT_52) || (boneflagarray[j] & STUDIO_FRAME_ANIMSCALE_52))
                                                            {
                                                                struct {
                                                                    local int boneidx = j;
            
                                                                    if(boneflagarray[j] & STUDIO_FRAME_ANIMROT_52)
                                                                        Quaternion48 animrot;
                        
                                                                    if(boneflagarray[j] & STUDIO_FRAME_ANIMPOS_52)
                                                                        Vector48 animpos;                                            
                        
                                                                    if(boneflagarray[j] & STUDIO_FRAME_ANIMSCALE_52)
                                                                        Vector48 animscale;
                                                                } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0x844b78>;      
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if((boneflagarray[j] & STUDIO_FRAME_ANIMPOS) || (boneflagarray[j] & STUDIO_FRAME_ANIMROT) || (boneflagarray[j] & STUDIO_FRAME_FULLANIMPOS))
                                                            {
                                                                struct {
                                                                    local int boneidx = j;
            
                                                                    if(boneflagarray[j] & STUDIO_FRAME_ANIMROT)
                                                                        Quaternion48 animrot;
                        
                                                                    if(boneflagarray[j] & STUDIO_FRAME_ANIMPOS)
                                                                        Vector48 animpos;                                            
                        
                                                                    if(boneflagarray[j] & STUDIO_FRAME_FULLANIMPOS)
                                                                        Vector animposfull;
                                                                } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0x844b78>;      
                                                            }
                                                        }
                                                    }
                                                } frame[sectionframes];
                    
                                                Assert(!((sizeof(frame) / sectionframes) != frameanim.framelength), "frame length mismatch");
                                            }
                                        } section;
                                    }
                                }
                            } sectionframeanimation;
                        }
                        else
                        {
                            struct {
                                FSeek(startof(animdesc) + animdesc.animindex);
                                if(hdr.version == 52)
                                    mstudio_frame_anim_t_v52 frameanim <bgcolor=0x632970>;
                                else
                                    mstudio_frame_anim_t frameanim <bgcolor=0x632970>;
                
                                byte boneflagarray[hdr.numbones] <read=ReadFrameAnimFlags(this), bgcolor=0xaaaa22>;
                
                                if(hdr.version == 52)
                                {
                                    FSeek(startof(frameanim) + frameanim.unkdataindex);
                                    unkframeanimdata_t unkdatatype[hdr.numbones];
                                }
                
                                FSeek(startof(frameanim) + frameanim.constantsoffset);
                                struct {
                                    for(j = 0; j < hdr.numbones; j++)
                                    {
                                        if((boneflagarray[j] & STUDIO_FRAME_RAWPOS) || (boneflagarray[j] & STUDIO_FRAME_RAWROT) || (hdr.version == 52 && (boneflagarray[j] & STUDIO_FRAME_RAWSCALE_52)))
                                        {
                                            struct {
                                                local int boneidx = j;
            
                                                if(boneflagarray[j] & STUDIO_FRAME_RAWROT)
                                                    Quaternion48 rawrot;
            
                                                if(boneflagarray[j] & STUDIO_FRAME_RAWPOS)
                                                    Vector48 rawpos;
            
                                                if(hdr.version == 52)
                                                {
                                                    if(boneflagarray[j] & STUDIO_FRAME_RAWSCALE_52)
                                                        Vector48 rawscale;
                                                }
            
                                            } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0x321431>;
                                        }                   
                                    }
                                } constantdata;
                
                                FSeek(startof(frameanim) + frameanim.frameoffset);
                                if(frameanim.framelength)
                                {
                                    struct {
                                        for(j = 0; j < hdr.numbones; j++)
                                        {
                                            if(hdr.version == 52)
                                            {
                                                if((boneflagarray[j] & STUDIO_FRAME_ANIMPOS_52) || (boneflagarray[j] & STUDIO_FRAME_ANIMROT_52) || (boneflagarray[j] & STUDIO_FRAME_ANIMSCALE_52))
                                                {
                                                    struct {
                                                        local int boneidx = j;
            
                                                        if(boneflagarray[j] & STUDIO_FRAME_ANIMROT_52)
                                                            Quaternion48 animrot;
                        
                                                        if(boneflagarray[j] & STUDIO_FRAME_ANIMPOS_52)
                                                            Vector48 animpos;                                            
                        
                                                        if(boneflagarray[j] & STUDIO_FRAME_ANIMSCALE_52)
                                                            Vector48 animscale;
                                                    } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0x844b78>;      
                                                }
                                            }
                                            else
                                            {
                                                if((boneflagarray[j] & STUDIO_FRAME_ANIMPOS) || (boneflagarray[j] & STUDIO_FRAME_ANIMROT) || (boneflagarray[j] & STUDIO_FRAME_FULLANIMPOS))
                                                {
                                                    struct {
                                                        local int boneidx = j;
            
                                                        if(boneflagarray[j] & STUDIO_FRAME_ANIMROT)
                                                            Quaternion48 animrot;
                        
                                                        if(boneflagarray[j] & STUDIO_FRAME_ANIMPOS)
                                                            Vector48 animpos;                                            
                        
                                                        if(boneflagarray[j] & STUDIO_FRAME_FULLANIMPOS)
                                                            Vector animposfull;
                                                    } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0x844b78>;      
                                                }
                                            }
                                        }
                                    } frame[animdesc.numframes];
                
                                    Assert(!((sizeof(frame) / animdesc.numframes) != frameanim.framelength), "frame length mismatch");
                                }
                            } frameanimation;
                        }
                    }
                    else
                    {
                        if(animdesc.sectionindex)
                        {
                            struct {
                                local int sectionlength = (animdesc.numframes / animdesc.sectionframes) + 2;
                
                                FSeek(startof(animdesc) + animdesc.sectionindex);
                                mstudioanimsections_t sectionindexes[sectionlength] <bgcolor=cLtBlue>;
                
                                for(k = 0; k < sectionlength; k++)
                                {
                                    if(sectionindexes[k].animindex && !sectionindexes[k].animblock)
                                    {
                                        struct {
                                            FSeek(startof(animdesc) + sectionindexes[k].animindex);
                                    
                                            for(j = 0; j < hdr.numbones; j++)
                                            {
                                                struct {
                                                    mstudio_rle_anim_t sectionanimheader <read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex), bgcolor=0x771122>;
                
                                                    if(sectionanimheader.flags & STUDIO_ANIM_ANIMROT)
                                                    {
                                                        struct {
                                                            ReadValuePtr(sectionanimheader.pRotV, animdesc.sectionframes + 1, 1);
                                                        } rot;
                                                    }
                                                    
                                                    if(sectionanimheader.flags & STUDIO_ANIM_ANIMPOS)
                                                    {
                                                        struct {
                                                            ReadValuePtr(sectionanimheader.pPosV, animdesc.sectionframes + 1, 0);
                                                        } pos;
                                                    }
            
                                                    if(sectionanimheader.flags & STUDIO_ANIM_ANIMSCALE)
                                                    {
                                                        struct {
                                                            ReadValuePtr(sectionanimheader.pScaleV, animdesc.sectionframes + 1, 2);
                                                        } scale;
                                                    }
                
                                                    FSeek(startof(sectionanimheader) + sectionanimheader.nextoffset);
                                                } section_anim_header_data <read=ReadString(startof(bones[this.sectionanimheader.bone]) + bones[this.sectionanimheader.bone].sznameindex)>;
                
                                                if(section_anim_header_data.sectionanimheader.nextoffset <= 0)
                                                        break;
                                            }
                                        } section;
                                    }
                                }
                            } sectionanimation;
                        }
                        else
                        {
                            struct {
                                FSeek(startof(animdesc) + animdesc.animindex);
                
                                for(j = 0; j < hdr.numbones; j++)
                                {
                                    struct {
                                        mstudio_rle_anim_t animheader <read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex), bgcolor=cBlue>;
            
                                        if(animheader.flags & STUDIO_ANIM_ANIMROT)
                                        {
                                            struct {
                                                ReadValuePtr(animheader.pRotV, animdesc.numframes, 1);
                                            } rot;
                                        }
                                        
                                        if(animheader.flags & STUDIO_ANIM_ANIMPOS)
                                        {
                                            struct {
                                                ReadValuePtr(animheader.pPosV, animdesc.numframes, 0);
                                            } pos;
                                        }

                                        if(animheader.flags & STUDIO_ANIM_ANIMSCALE)
                                        {
                                            struct {
                                                ReadValuePtr(animheader.pScaleV, animdesc.numframes, 2);
                                            } scale;
                                        }
            
                                        FSeek(startof(animheader) + animheader.nextoffset);     
                                    } anim_header_data <read=ReadString(startof(bones[this.animheader.bone]) + bones[this.animheader.bone].sznameindex)>;
                
                                    if(anim_header_data.animheader.nextoffset <= 0)
                                            break;
                                }
                            } animation;
                        }
                    }                  
                }

                // ikrule
                #include "../mdl/mdl_module_ikrule.bt"
                
                // framemovement
                #include "../mdl/mdl_module_framemovement.bt"
    
                if(animdesc.nummovements)
                {
                    FSeek(startof(animdesc) + animdesc.movementindex);
                    mstudiomovement_t movement[animdesc.nummovements] <fgcolor=0xaa7722>;
                }
    
                if(animdesc.zeroframeindex)
                {
                    FSeek(startof(animdesc) + animdesc.zeroframeindex);
    
                    struct {
                        for(k = 0; k < animdesc.zeroframecount; k++)
                        {
                            struct {
                                for (j = 0; j < hdr.numbones; j++)
                                {
                                    if (bones[j].flags & BONE_HAS_SAVEFRAME_POS || bones[j].flags & BONE_HAS_SAVEFRAME_ROT64 || bones[j].flags & BONE_HAS_SAVEFRAME_ROT32)
	                                {
                                        struct {
                                            local int boneidx = j;
    
                                            if(bones[j].flags & BONE_HAS_SAVEFRAME_POS)
                                                Vector48 pos;
    
                                            if(bones[j].flags & BONE_HAS_SAVEFRAME_ROT64)
                                                Quaternion64 rot;
    
                                            if(bones[j].flags & BONE_HAS_SAVEFRAME_ROT32)
                                                Quaternion32 rot;
                                        } bonedata <read=ReadString(startof(bones[boneidx]) + bones[boneidx].sznameindex), bgcolor=0xffaa88>;
                                    }
                                }
                            } frame;
                        }
    
                        if(animdesc.numikrules)
                        {
                            FSeek(startof(animdesc) + animdesc.ikrulezeroframeindex);
                            mstudioikrulezeroframe_t zeroframeikrule[animdesc.numikrules] <bgcolor=cGreen>;
                        }
                    } zeroframe;
                }
            } animdesc <read=ReadString(startof(this.animdesc) + this.animdesc.sznameindex)>;
        }
    } animdescs <read=Str("%i animations", hdr.numlocalanim)>;
}

// sequence stuff
#include "../mdl/mdl_module_sequences.bt"

// unchanged until v54
#include "../mdl/mdl_module_nodes.bt"

// models
#include "../mdl/mdl_module_bodyparts.bt"

// flexes
// depreciated in v52+
if(hdr.version < 52)
{
    if(hdr.numflexdesc)
    {
        FSeek(hdr.flexdescindex);
        mstudioflexdesc_t flexdesc[hdr.numflexdesc] <bgcolor=0x55aaff, read=ReadString(startof(this) + this.szFACSindex)>;
    }
    
    if(hdr.numflexcontrollers)
    {
        FSeek(hdr.flexcontrollerindex);
        mstudioflexcontroller_t flexcontroller[hdr.numflexcontrollers] <bgcolor=0x00aaff, read=ReadString(startof(this) + this.sznameindex)>;
    }
    
    if(hdr.numflexrules)
    {
        FSeek(hdr.flexruleindex);
        mstudioflexrule_t flexrule[hdr.numflexrules] <bgcolor=0x00ccdd>;
    
        local int flexopcount = 0;
    
        for(i = 0; i < hdr.numflexrules; i++)
            flexopcount += flexrule[i].numops;
    
        mstudioflexop_t flexop[flexopcount] <bgcolor=0x88aadd>;
    }
    
    if(hdr.numflexcontrollerui)
    {
        FSeek(hdr.flexcontrolleruiindex);
        mstudioflexcontrollerui_t flexcontrollerui[hdr.numflexcontrollerui] <bgcolor=0x00aaff, read=ReadString(startof(this) + this.sznameindex)>;
    }
}

// ik
#include "../mdl/mdl_module_ikchain.bt"

FSeek(hdr.localikautoplaylockindex);
mstudioiklock_t iklocks[hdr.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

if(hdr.version < 52 && hdr.nummouths > 0)
{
    FSeek(startof(hdr) + hdr.mouthindex);
    mstudiomouth_t mouth[hdr.nummouths] <fgcolor=0x5588cc>;
}

FSeek(hdr.localposeparamindex);
mstudioposeparamdesc_t poseparm[hdr.numlocalposeparameters] <bgcolor=cYellow, read=ReadString(startof(this) + this.sznameindex)>;


// the funny animblocks
FSeek(hdr.animblockindex);
mstudioanimblock_t animblocks[hdr.numanimblocks] <bgcolor=0xdc7633>;

// I do an include file because these are mostly the same across all mdl versions,
// and I really don't wanna have to update every template every time I change something.
#include "../mdl/mdl_module_texturesincludemdl.bt"


// do keyvalues, this remains unchanged in all models since it's just char data.
FSeek(hdr.keyvalueindex);
char keyvalues_char[hdr.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(mdlSubHeader.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[mdlSubHeader.numsrcbonetransform] <bgcolor=cDkGreen, read=ReadString(startof(this) + this.sznameindex)>;


// linear bone table
//#include "../mdl/mdl_module_linearbone.bt"
if (mdlSubHeader.linearboneindex)
{
    FSeek(startof(mdlSubHeader) + mdlSubHeader.linearboneindex);
    mstudiolinearbone_t linearbone <bgcolor=cGreen>;
    
    struct {
        int bone_flags[linearbone.numbones] <read=ReadBoneFlags(this)>;
        int bone_parents[linearbone.numbones] <read=ReadString(startof(bones[ReadParentBone(this)]) + bones[ReadParentBone(this)].sznameindex)>;
        
        Vector bone_pos[linearbone.numbones];
        Quaternion bone_quat[linearbone.numbones];
        RadianEuler bone_rot[linearbone.numbones];
        
        matrix3x4_t bone_poseToBone[linearbone.numbones];
        
        // only check this because all others should (as far as I know) be filled out no matter what version (version < 53)
        if(linearbone.posscaleindex)
            Vector bone_posscale[linearbone.numbones];
        Vector bone_rotscale[linearbone.numbones];
                
        Quaternion bone_qAlignment[linearbone.numbones];
    } linearbonedata <bgcolor=cLtGreen>;
};

struct pertrinode_t(int pNodeStart, int pLeafStart, int nodeIndex)
{
    FSeek(pNodeStart + (sizeof(mstudiopertrinode_t) * nodeIndex));
    mstudiopertrinode_t node <fgcolor=0x6644dd>;
    
    if (node.child0Index < 0)
    {
        FSeek(pLeafStart + (~node.child0Index * sizeof(mstudiopertrileaf_t)));
        mstudiopertrileaf_t leaf0 <fgcolor=0xffaaaa>;
    }
    else
    {
        BuildNodeTreeForBVH2(pNodeStart, pLeafStart, node.child0Index);
    }
    
    if (node.child1Index < 0)
    {
        FSeek(pLeafStart + (~node.child1Index * sizeof(mstudiopertrileaf_t)));
        mstudiopertrileaf_t leaf1 <fgcolor=0xffaaaa>;
    }
    else
    {
        BuildNodeTreeForBVH2(pNodeStart, pLeafStart, node.child1Index);
    }
};

void BuildNodeTreeForBVH2(int pNodeStart, int pLeafStart, int nodeIndex)
{
    FSeek(pNodeStart);
    pertrinode_t node_group(pNodeStart, pLeafStart, nodeIndex);
}

if (hdr.version == 52)
{


    // per tri aabb data
    FSeek(startof(mdlSubHeader) + mdlSubHeader.m_nPerTriAABBIndex);
    mstudiopertrihdr_t pertrihdr <fgcolor=cDkRed>; // header completely nulled out if unused.
    
    if (mdlSubHeader.m_nPerTriAABBNodeCount || mdlSubHeader.m_nPerTriAABBLeafCount || mdlSubHeader.m_nPerTriAABBVertCount)
    {  
        local int pNode = startof(mdlSubHeader) + mdlSubHeader.m_nPerTriAABBIndex + sizeof(mstudiopertrihdr_t);
        local int pLeaf = pNode + (sizeof(mstudiopertrinode_t) * mdlSubHeader.m_nPerTriAABBNodeCount);
    
        if (mdlSubHeader.m_nPerTriAABBNodeCount)
        {
            struct {
                BuildNodeTreeForBVH2(pNode, pLeaf, 0);
            } node_tree;
        }
    
        FSeek(pNode);
        mstudiopertrinode_t pertrinodes[mdlSubHeader.m_nPerTriAABBNodeCount];
        mstudiopertrileaf_t pertrileaves[mdlSubHeader.m_nPerTriAABBLeafCount];                         
        mstudiopertrivertex_t pertriverts[mdlSubHeader.m_nPerTriAABBVertCount] <fgcolor=cRed>;
    };
};


// string table
//#include "../mdl/mdl_module_stringtable.bt"
if(mdlSubHeader.sznameindex == 0)
{        
    FSeek((hdr.surfacepropindex - 1)  + startof(hdr));
    char stringtable[hdr.length - ((hdr.surfacepropindex - 1)  + startof(hdr))] <fgcolor=cLtRed>;
}
else
{
    FSeek((mdlSubHeader.sznameindex - 1)  + startof(mdlSubHeader));
    char stringtable[hdr.length - ((mdlSubHeader.sznameindex - 1)  + startof(mdlSubHeader))] <fgcolor=cLtRed>;
}